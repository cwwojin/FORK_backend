services:
  backend-dev:
    container_name: fork_backend_dev
    env_file: .env
    environment:
      - NODE_ENV=development
    build:
      dockerfile: ./Dockerfile
      target: dev
    image: fork_dev
    pull_policy: build
    restart: unless-stopped
    ports:
      - "80:3000"
    profiles:
      - dev

  backend-test:
    container_name: fork_backend_test
    env_file: .env
    environment:
      - NODE_ENV=test
    build:
      dockerfile: ./Dockerfile
      target: test
    image: fork_test
    pull_policy: build
    restart: unless-stopped
    ports:
      - "80:3000"
    profiles:
      - test

  backend-prod:
    container_name: fork_backend_prod
    env_file: .env
    environment:
      - NODE_ENV=production
    build:
      dockerfile: ./Dockerfile
      target: prod
    image: fork_prod
    pull_policy: build
    restart: unless-stopped
    ports:
      - "80:3000"
    profiles:
      - prod

  meilisearch:
    container_name: meilisearch
    env_file: .env
    image: getmeili/meilisearch:v1.8
    ports:
      - "7700:7700"
    volumes:
      - ./.meili_data:/meili_data
    restart: unless-stopped
    profiles: ["dev", "prod"]

  meilisync-dev:
    container_name: meilisync
    platform: linux/amd64
    image: long2ice/meilisync:dev
    volumes:
      - .meilisync/config.dev.yml:/meilisync/config.yml
    restart: unless-stopped
    profiles:
      - dev

  meilisync-prod:
    container_name: meilisync
    platform: linux/amd64
    image: long2ice/meilisync:dev
    volumes:
      - .meilisync/config.prod.yml:/meilisync/config.yml
    restart: unless-stopped
    profiles:
      - prod